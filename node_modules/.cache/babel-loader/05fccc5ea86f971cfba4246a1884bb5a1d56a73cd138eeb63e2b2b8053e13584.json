{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nconst useSectionInView = sectionId => {\n  _s();\n  const [isInView, setIsInView] = useState(false);\n  useEffect(() => {\n    const section = document.getElementById(sectionId);\n    if (!section) return;\n    const observer = new IntersectionObserver(([entry]) => setIsInView(entry.isIntersecting), {\n      threshold: 0.5\n    });\n    observer.observe(section);\n    return () => observer.disconnect();\n  }, [sectionId]);\n  return isInView;\n};\n_s(useSectionInView, \"CljPiJpva/9SgSrlkVLPLqzrE+U=\");\nexport default useSectionInView;","map":{"version":3,"names":["useEffect","useState","useSectionInView","sectionId","_s","isInView","setIsInView","section","document","getElementById","observer","IntersectionObserver","entry","isIntersecting","threshold","observe","disconnect"],"sources":["/var/www/portfolio.eckodev-tech.fr/src/hooks/useSectionInView.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst useSectionInView = (sectionId) => {\n  const [isInView, setIsInView] = useState(false);\n\n  useEffect(() => {\n    const section = document.getElementById(sectionId);\n    if (!section) return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => setIsInView(entry.isIntersecting),\n      { threshold: 0.5 }\n    );\n\n    observer.observe(section);\n\n    return () => observer.disconnect();\n  }, [sectionId]);\n\n  return isInView;\n};\n\nexport default useSectionInView;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EAE/CD,SAAS,CAAC,MAAM;IACd,MAAMO,OAAO,GAAGC,QAAQ,CAACC,cAAc,CAACN,SAAS,CAAC;IAClD,IAAI,CAACI,OAAO,EAAE;IAEd,MAAMG,QAAQ,GAAG,IAAIC,oBAAoB,CACvC,CAAC,CAACC,KAAK,CAAC,KAAKN,WAAW,CAACM,KAAK,CAACC,cAAc,CAAC,EAC9C;MAAEC,SAAS,EAAE;IAAI,CACnB,CAAC;IAEDJ,QAAQ,CAACK,OAAO,CAACR,OAAO,CAAC;IAEzB,OAAO,MAAMG,QAAQ,CAACM,UAAU,CAAC,CAAC;EACpC,CAAC,EAAE,CAACb,SAAS,CAAC,CAAC;EAEf,OAAOE,QAAQ;AACjB,CAAC;AAACD,EAAA,CAlBIF,gBAAgB;AAoBtB,eAAeA,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}